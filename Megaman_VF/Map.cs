using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Media;
using System.Threading;
using System.Collections;
using System.Windows.Forms;

namespace Scroll
{
    public class Map
    {
        private bool firstTime = true;
        private int randomValue;
        Bitmap tilesLevel = new Bitmap("tilesC.png");
        public Player prensa, pre2, pre3, pre4, pre5;
        public Player tal, tal2, tal3, tal4, tal5, tal6, tal7, tal8;
        public Player talU, talU2, talU3, talU4, talU5, talU6, talU7, talU8;
        public bool shoot;
        List<Player> Objects = new List<Player>();
        public Player EP, EPC, EP2, EPC2, EP3, EPC3, RESG,RES2,RES3,RES4,EP4,EPC4;
        int divs = 2;
        public int nTileWidth = 20;
        public int nTileHeight = 20;
        public int HCount = 0;
        int nLevelWidth, nLevelHeight;
        private string sLevel;
        private string map;
        public Bitmap bmp;
        public Graphics g;
        //ANIMATED SPRITES
        Player EB;
        Player Proyectile;
        Sprite coin, enC, per, U, eq, e1, e2, e3, e4, M, i, S, L, R, H, W, TAL, E, orb, sorb, ball, dot;
        //ANIMATED ENEMIES
        Sprite pren;
        SoundPlayer soundPlayer;
        int score;
        bool isP1 = true;
        Thread thread, threadStop;
        public Random random;

        public Map(Size size)
        {
            random = new Random();
            coin = new Sprite(new Size(35, 33), new Size(nTileWidth, nTileHeight), new Point(), Resource1.coin, Resource1.coin);
            enC = new Sprite(new Size(17, 17), new Size(nTileWidth, nTileHeight), new Point(), Resource1.TE, Resource1.TE);
            per = new Sprite(new Size(17, 17), new Size(nTileWidth, nTileHeight), new Point(), Resource1.per, Resource1.per);
            U = new Sprite(new Size(17, 17), new Size(nTileWidth, nTileHeight), new Point(), Resource1.U, Resource1.U);
            eq = new Sprite(new Size(17, 17), new Size(nTileWidth, nTileHeight), new Point(), Resource1.eq, Resource1.eq);
            e1 = new Sprite(new Size(16, 16), new Size(nTileWidth, nTileHeight), new Point(), Resource1.e1, Resource1.e1);
            e2 = new Sprite(new Size(16, 16), new Size(nTileWidth, nTileHeight), new Point(), Resource1.e2, Resource1.e2);
            e3 = new Sprite(new Size(16, 16), new Size(nTileWidth, nTileHeight), new Point(), Resource1.e3, Resource1.e3);
            e4 = new Sprite(new Size(16, 16), new Size(nTileWidth, nTileHeight), new Point(), Resource1.e4, Resource1.e4);
            M = new Sprite(new Size(16, 16), new Size(nTileWidth, nTileHeight), new Point(), Resource1.M, Resource1.M);
            i = new Sprite(new Size(16, 16), new Size(nTileWidth, nTileHeight), new Point(), Resource1.i, Resource1.i);
            S = new Sprite(new Size(16, 16), new Size(nTileWidth, nTileHeight), new Point(), Resource1.S, Resource1.S);
            L = new Sprite(new Size(16, 16), new Size(nTileWidth, nTileHeight), new Point(), Resource1.L, Resource1.L);
            R = new Sprite(new Size(16, 16), new Size(nTileWidth, nTileHeight), new Point(), Resource1.R, Resource1.R);
            H = new Sprite(new Size(26, 30), new Size(nTileWidth, nTileHeight), new Point(), Resource1.ER, Resource1.ER);
            W = new Sprite(new Size(32, 32), new Size(nTileWidth, nTileHeight), new Point(), Resource1.ERR, Resource1.ERR);
            TAL = new Sprite(new Size(8, 24), new Size(nTileWidth, nTileHeight), new Point(), Resource1.TAL, Resource1.TAL);
            E = new Sprite(new Size(16, 16), new Size(nTileWidth, nTileHeight), new Point(), Resource1.E, Resource1.E);
            orb = new Sprite(new Size(16, 12), new Size(nTileWidth, nTileHeight), new Point(), Resource1.orb, Resource1.orb);
            ball = new Sprite(new Size(16, 16), new Size(nTileWidth, nTileHeight), new Point(), Resource1.BALL, Resource1.BALL);
            sorb = new Sprite(new Size(8, 8), new Size(nTileWidth, nTileHeight), new Point(), Resource1.sorb, Resource1.sorb);
            dot = new Sprite(new Size(8, 8), new Size(5, 5), new Point(), Resource1.dot, Resource1.dot);
            EB = new Player(new Size(8, 56), new Size(14, 112), new Point(), Resource1.EB, Resource1.EB);
            //ENEMIES
            pren = new Sprite(new Size(32, 110), new Size(40, 100), new Point(), Resource1.PREN, Resource1.PREN);

            prensa = new Player(new Size(32, 110), new Size(40, 110), new Point(), Resource1.PREN, Resource1.PREN);

            pre2 = new Player(new Size(32, 110), new Size(40, 110), new Point(), Resource1.PREN, Resource1.PREN);

            pre3 = new Player(new Size(32, 110), new Size(40, 110), new Point(), Resource1.PREN, Resource1.PREN);
            pre4 = new Player(new Size(32, 110), new Size(40, 110), new Point(), Resource1.PREN, Resource1.PREN);
            pre5 = new Player(new Size(32, 110), new Size(40, 110), new Point(), Resource1.PREN, Resource1.PREN);

            EP = new Player(new Size(32, 32), new Size(32, 32), new Point(), Resource1.ERR, Resource1.ERR);
            EPC = new Player(new Size(26, 30), new Size(26, 30), new Point(), Resource1.ER, Resource1.ER);
            EP2 = new Player(new Size(32, 32), new Size(32, 32), new Point(), Resource1.ERR, Resource1.ERR);
            EPC2 = new Player(new Size(26, 30), new Size(26, 30), new Point(), Resource1.ER, Resource1.ER);
            EP3 = new Player(new Size(32, 32), new Size(32, 32), new Point(), Resource1.ERR, Resource1.ERR);
            EPC3 = new Player(new Size(26, 30), new Size(26, 30), new Point(), Resource1.ER, Resource1.ER);

            EP4 = new Player(new Size(32, 32), new Size(32, 32), new Point(), Resource1.ERR, Resource1.ERR);
            EPC4 = new Player(new Size(26, 30), new Size(26, 30), new Point(), Resource1.ER, Resource1.ER);

            Bitmap talImage = Resource1.TAL;
            talImage.RotateFlip(RotateFlipType.Rotate180FlipNone);
            //taladros que van arriba
            talU = new Player(new Size(8, 24), new Size(8, 24), new Point(), Resource1.TAL, Resource1.TAL);
            talU2 = new Player(new Size(8, 24), new Size(8, 24), new Point(), Resource1.TAL, Resource1.TAL);
            talU3 = new Player(new Size(8, 24), new Size(8, 24), new Point(), Resource1.TAL, Resource1.TAL);
            talU4 = new Player(new Size(8, 24), new Size(8, 24), new Point(), Resource1.TAL, Resource1.TAL);
            talU5 = new Player(new Size(8, 24), new Size(8, 24), new Point(), Resource1.TAL, Resource1.TAL);
            talU6 = new Player(new Size(8, 24), new Size(8, 24), new Point(), Resource1.TAL, Resource1.TAL);
            talU7 = new Player(new Size(8, 24), new Size(8, 24), new Point(), Resource1.TAL, Resource1.TAL);
            talU8 = new Player(new Size(8, 24), new Size(8, 24), new Point(), Resource1.TAL, Resource1.TAL);

            //taladros que van abajo
            tal = new Player(new Size(8, 24), new Size(8, 24), new Point(), talImage, talImage);
            tal2 = new Player(new Size(8, 24), new Size(8, 24), new Point(), talImage, talImage);
            tal3 = new Player(new Size(8, 24), new Size(8, 24), new Point(), talImage, talImage);
            tal4 = new Player(new Size(8, 24), new Size(8, 24), new Point(), talImage, talImage);
            tal5 = new Player(new Size(8, 24), new Size(8, 24), new Point(), talImage, talImage);
            tal6 = new Player(new Size(8, 24), new Size(8, 24), new Point(), talImage, talImage);
            tal7 = new Player(new Size(8, 24), new Size(8, 24), new Point(), talImage, talImage);
            tal8 = new Player(new Size(8, 24), new Size(8, 24), new Point(), talImage, talImage);

            RESG = new Player(new Size(24, 32), new Size(25, 32), new Point(), Resource1.RESG, Resource1.RESG);
            RES2 = new Player(new Size(24, 32), new Size(25, 32), new Point(), Resource1.RESG, Resource1.RESG);
            RES3 = new Player(new Size(24, 32), new Size(25, 32), new Point(), Resource1.RESG, Resource1.RESG);
            RES4 = new Player(new Size(24, 32), new Size(25, 32), new Point(), Resource1.RESG, Resource1.RESG);

            Proyectile = new Player(new Size(8, 8), new Size(8, 8), new Point(), Resource1.dot, Resource1.dot);


            soundPlayer = new SoundPlayer(Resource1.coimp);
            Play();
            score = 0;


            sLevel += "|!.|!....|!....|!ABDE|!..|!.|!..[5656]786]8]78][][56][56][78[56][565656][56][56][56][56][56][56][56][56][56][56][56][56][78][78][78]..........................[56565****************************************************************************************************************************************************************";
            sLevel += "|!.|!...ABDE..ABDE|!ABDEABDE|!..[7878]568]6]56][][78][78][56[78][787878][78][78][78][78][78][78][78][78][78][78][78][78][56][56][56]........--......--........[78787****************************************************************************************************************************************************************";
            sLevel += "|!.|!....|!....|!ABDE|!....ABDE.[5656]78[56]78][][..][..][78[56][565656][56][56][56][56][56][56][56][56][56][56][56][56][78][78][78]..............................[5****************************************************************************************************************************************************************";
            sLevel += "|!ABDE..ABDE..ABDE...|!.........[7878]..[78]..][.........[..[78][787878][78][78][78][78][78][78][78][78][78][78][78][78][56][56][56]......----......--............[7****************************************************************************************************************************************************************";
            sLevel += "BDE|!..........|!...ABDE................................................[56]....[56]....[56]............................[78][78][78]..............................[5****************************************************************************************************************************************************************";
            sLevel += "..ABDE........ABDE......................................................[78]....[78]....[78]............................[56][56][56]..............................[7****************************************************************************************************************************************************************";
            sLevel += "........................................................................................................................[78][78][78]..........e...................[5****************************************************************************************************************************************************************";
            sLevel += "........----.................e................................e.........................................................[56][56][56].........LLLL.................[7****************************************************************************************************************************************************************";
            sLevel += "..........................LLLLLLLLLLLL..RRRR..LLLLe.][e.][..RRRR..............................56RRRRRRRRRRRRRRRRRRRR..............................................[5****************************************************************************************************************************************************************";
            sLevel += "....................................[5656][5656]5656][56][565656..............................78[78][78][78][78][78]....................RRRR......................[7****************************************************************************************************************************************************************";
            sLevel += "....................................[7878][7878]7878][78][787878................[5656]......5656[56][56][56][56][56]e...............................LLLLLLLLLLLL..[5****************************************************************************************************************************************************************";
            sLevel += "RRRRRRRRRRRRRRRRRR..LLLLLLLLLLLL....[5656][5656]5656][56][565656................[7878]e.....7878[78][78][78][78][78]LLLLLLLLLLLLLLLLLLLL............[56]..[7878]..[7****************************************************************************************************************************************************************";
            sLevel += "..ABDE..ABDE..ABDE.....ABDE.........[7878][7878]7878][78][787878..[565656][5656][5656][5656]5656[56][56][56][56][56][56][5656][5656][56]............[56]..[5656]..[5****************************************************************************************************************************************************************";
            sLevel += "BDE|!ABDE|!....|!...ABDE|!ABDE......[5656][5656]5656][56][565656..[787878][7878][7878][7878]7878[78][78][78][78][78][78][7878][7878][78]............[78]..[7878]..[7****************************************************************************************************************************************************************";
            sLevel += "|!ABDE|!ABDE..ABDE...|!ABDE|!.......[7878][7878]7878][78][787878..[565656][5656][5656][5656]5656[56][56][56][56][56][56][5656][5656][56]--........--[56]..[5656]..[5****************************************************************************************************************************************************************";
            sLevel += "BDE|!ABDE|!....|!...ABDE|!ABDE......[5656][5656]5656][56][565656..[787878][7878][7878][7878]7878[78][78][78][78][78][78][7878][7878][78]............[78]..[7878]..[7****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************878]..[7878]..[7****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************656]..[5656].e[5****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************878]..[7878]..[7****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************656]..[5656]..[5****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************878]..[7878]..[7****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************656]..[5656]..[5****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************878]..[7878]..[7****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************6]............[5****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************8]............[7****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************6]..LLLLLLLLLL[5****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************8]..ABDEABDEABDE****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************6]...|!..|!.ABDE****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************8]..ABDEABDE.|!.****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************6]...|!.ABDE.|!.****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************8]..ABDE.|!.ABDE****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************6]..e|!..|!..|!.****************************************************************************************************************************************************************";
            sLevel += "****************************************************************************************************************************************************6]..ABDE.|!.ABDEABDE.........................................................................................................................VTT................[56][56][56][56]";
            sLevel += "****************************************************************************************************************************************************8]...|!.ABDE.|!..|!.....................----....--............----....--..............--....--...............................................VWX................[78][78][78][78]";
            sLevel += "****************************************************************************************************************************************************6]..ABDE.|!..|!.ABDE.........................................................................................................................VYZ[56][56][56][56][PPPPPPPPPPPPPP]";
            sLevel += "****************************************************************************************************************************************************8]..ABDEABDEABDE.|!.............................--..............--....--..............................--....--...............................C++[78][78][78][78][@@@@@@@@@@@@@@]";
            sLevel += "****************************************************************************************************************************************************6]...|!..|!..|!.ABDE........................................................................ABDE.................................................PPPPPPPPPPPPPP..@............@]";
            sLevel += "****************************************************************************************************************************************************8]..ABDE.|!.ABDEABDE..............LLLL..................................................FF..ABDE.................................................@@@@@@@@@@@@@@..@....--......@]";
            sLevel += "****************************************************************************************************************************************************6]..ABDEABDEABDEABDE................................................................FF..GG~~~|!..................................................@@@@@@@@@@@@@@..@............@]";
            sLevel += "****************************************************************************************************************************************************8]............................RRRR..............................................FFe.GG~~II¬¬¬|!...............--......----..........e............@@@@@@@@@@@@@@..@............@]";
            sLevel += "****************************************************************************************************************************************************6]..........................................................................FFe.GG~~GI¬¬JJAEABDE................................ABDEABDE[56][56][56][56][56][56][@............@]";
            sLevel += "****************************************************************************************************************************************************8]........................LLLL..........................................FF..GG~~GI¬¬IJ.F..............--................e........|!.ABDE[78][78][78][78][78][78][@............@]";
            sLevel += "****************************************************************************************************************************************************6]......e................................e..........................FFe.GG~~GI¬¬IJ..IF~G........................ABDEABDEABDEABDE.|!..|!.[56][56]................[@@@@@@@@@@@@@@]";
            sLevel += "****************************************************************************************************************************************************8]LLLLLLLLLLLLLLLLLLLLLLLL...............LLLLLLLLLLLLLLL........FF..GG~~GI¬¬IJ..IFF.JG~Ie........................|!.ABDE.|!.ABDEABDEABDE[78][78]................[@@@@@@@@@@@@@@]";
            sLevel += "****************************************************************************************************************************************************ABDE.....ABDE..ABDE..ABDE.................................FFABDEGG~~GI¬¬IJ..IFF.JGG~~G.JABDEABDE.....[56]ABDEABDE|!..|!.ABDE.|!..|!.ABDE[56][56]-..-............[RRRRRRRRRRRRRR]";
            sLevel += "****************************************************************************************************************************************************.|!ABDE...|!ABDE|!ABDE|!..................................GG.|!.GI¬¬IJ..IFF.JGG~~GI~~I...|!..|!......[78].|!..|!ABDEABDE.|!.ABDEABDE.|!.[78][78]................[78][78][78][78]";
            sLevel += "****************************************************************************************************************************************************ABDE|!ABDE|!.|!ABDE|!.|!----..........------------......--II.|!.IJ..IFF.JGG~~II~~IJ..I...|!..|!......[56]ABDEABDE|!.ABDEABDE.|!..|!.ABDE[56][56]........--......[56][56][56][56]";
            sLevel += "****************************************************************************************************************************************************.|!ABDE|!.|!.|BD|!.|!.|!..................................JJ.|!.IFF.JGG~~II~~IJ..I...J...|!..|!......[78].|!..|!.|!..|!..|!..|!..|!..|!.[78][78]................[78][78][78][78]";

            map += ".........................................................................................................................................120..........12...120......................................................................................................................................................................";
            map += "........................................................................................................................................%34%..UUUUUU..340..34.......................................................................................................................................................................";
            map += ".............12...........1.........................................................................................................20..12.............1200.........................................................................................................................................................................";
            map += "............23..........1234........................................................................................................4%.%34....UUUUUU...34%..........................................................................................................................................................................";
            map += "..........%34......1....34%.....34...................................................................................................120............................................................................................................................................................................................";
            map += ".1.........%.......340...%12......0...P.............................................................................................%34%............................................................................................................................................................................................";
            map += ".34...............12%.....34.....0%.................................................................................................0%..............................................................................................................................................................................................";
            map += "12%....%....UUUUUU340.........0%12...................................................................................................0.......LSSL...................................................................................................................................................................................";
            map += "340..012.0...........%....LSSSSSSSSSSL..RSSR..LSSL..........RSSR................................RSSSSSSSSSSSSSSSSSSR............................%..........012......................................................................................................................................................................";
            map += "%...%.34%...120...............34........................................................................................................RSSR....12......0%1234......................................................................................................................................................................";
            map += ".....0.0121234%..............................................................................................................................12034..LSSSSSSSSSSL....................................................................................................................................................................";
            map += "RSSSSSSSSSSSSSSSSR..LSSSSSSSSSSL....................................................................................LSSSSSSSSSSSSSSSSSSL.....34%........34..........................................................................................................................................................................";
            map += "............20.....12.........MMMMMM......................................................................................................MMMMMMMM..................................................................................................................................................................................";
            map += "...........34.....%3..........iiiiii......................................................................................................iiiiiiii..................................................................................................................................................................................";
            map += "...................%..........======......................................................................................................========..................................................................................................................................................................................";
            map += "....................................................................................................................................................................................................................................................................................................................................";
            map += ".........................................................................................................................................................1..........................................................................................................................................................................";
            map += "........................................................................................................................................................%3..........................................................................................................................................................................";
            map += ".........................................................................................................................................................1.......0..................................................................................................................................................................";
            map += ".........................................................................................................................................................3..........................................................................................................................................................................";
            map += ".........................................................................................................................................................0......0%..................................................................................................................................................................";
            map += ".................................................................................................................................................................0..................................................................................................................................................................";
            map += ".................................................................................................................................................................1..................................................................................................................................................................";
            map += ".................................................................................................................................................................3..................................................................................................................................................................";
            map += "....................................................................................................................................................................................................................................................................................................................................";
            map += "........................................................................................................................................................LSSSSSSSSL..................................................................................................................................................................";
            map += "......................................................................................................................................................20............................................................................................................................................................................";
            map += "......................................................................................................................................................4.............................................................................................................................................................................";
            map += "......................................................................................................................................................%.............................................................................................................................................................................";
            map += "......................................................................................................................................................12............................................................................................................................................................................";
            map += "......................................................................................................................................................34............................................................................................................................................................................";
            map += "....................................................................................................................................................................................................................................................................................................................................";
            map += "...........................................................................................................................................................................................0.............0..................................................121234...................................012....1234.34.................";
            map += "..........................................................................................................................................................................................12....UUUU..0.12............UUUU..................UUUU............3434%...12..............................1234....34.%12%.................";
            map += "......................................................................................................................................................20................20...%12..........3412%.......1234......12%.....................12%............012.........034%.....12......................................................";
            map += "......................................................................................................................................................4................34.0%..34...........%3412UUUU..34%.......340...UUUU..............340...........1234..UUUU..%.%.12UUUU34......................................................";
            map += "......................................................................................................................................................%..................%120%...............034.................012%............120...00%12..........340...........0%34...120............%............................120.....0.1..";
            map += "......................................................................................................................................................0...................34.0........LSSL.....%..................3412.......%.1234...12.034...........%.............0....%34.............12..........................234%..UU12%3..";
            map += ".......................................................................................................................................................%..............................12............................34......12%340.0..34................%.12....................0%.....12034..........................4..120..34.0..";
            map += ".................................................................................................................................................................034..............RSSR34...................................%34.%..%.....................1234........UUUUUU.....%.0...1234%.%12........................%.%34....%....";
            map += "......................................................................................................................................................20...0..12.120..............%3400%...........120.....................12..0........................34........0....0...0%.%.12.....................................012.120MMMM..";
            map += "......................................................................................................................................................4...%.%034.34...........LSSL.%...0...........34%....................%3.....................034.....%..UUUU12....12..%.120.34.....3..............................1234%34.iiii..";
            map += ".........................................................................................................................................................12%0..12%................................0..12%.......................................0%..............034..................................3412...0...034.1................";
            map += "......................................................................................................................................................LSSSSSSSSSSSSSSSSSSSSSSL...............LSSSSSSSSSSSSSL..................................12..............12%......3............................%.34%012....%.%3................";
            map += "..........................................................................................................................................................034...................MMMMMMMMMM......34%340MMMMMM..............................1.........MMMMM............................................UU.12340.MMMMMM.RSSSSSSSSSSSSR.";
            map += "................................................................................................................................................................................iiiiiiiiii.......%.%..iiiiii..............................34........=====...............................................34.%..iiiiii................";
            map += "................................................................................................................................................................................==========............======........................................UUUUU.....................................................======................";
            map += "....................................................................................................................................................................................................................................................................................................................................";

            nLevelWidth = 324;
            nLevelHeight = 48;

            bmp = new Bitmap(size.Width / divs, size.Height / divs);

            g = Graphics.FromImage(bmp);
            g.PixelOffsetMode = PixelOffsetMode.HighSpeed;
            g.SmoothingMode = SmoothingMode.HighSpeed;
        }

        public void Draw(PointF cameraPos, string message, Player player)
        {

            if (player.life <= 1) // Suponiendo que "vida" es una variable que indica la cantidad de vidas del jugador
            {
                // Código para mostrar una ventana de Game Over
                player.endGame = true;
            }
            // Draw Level based on the visible tiles on our picturebox (canvas)
            int nVisibleTilesX = bmp.Width / nTileWidth;
            int nVisibleTilesY = bmp.Height / nTileHeight;

            // Calculate Top-Leftmost visible tile
            float fOffsetX = cameraPos.X - (float)nVisibleTilesX / 2.0f;
            float fOffsetY = cameraPos.Y - (float)nVisibleTilesY / 2.0f;



            // Clamp camera to game boundaries
            if (fOffsetX < 0) fOffsetX = 0;
            if (fOffsetY < 0) fOffsetY = 0;
            if (fOffsetX > nLevelWidth - nVisibleTilesX) fOffsetX = nLevelWidth - nVisibleTilesX;
            if (fOffsetY > nLevelHeight - nVisibleTilesY) fOffsetY = nLevelHeight - nVisibleTilesY;


            int w, h, u;
            // map properties
            w = 324;// MAP width
            h = 45; // MAP height
            u = 20; // IMAGE unit

            float fTileOffsetX = (fOffsetX - (int)fOffsetX) * nTileWidth;
            float fTileOffsetY = (fOffsetY - (int)fOffsetY) * nTileHeight;
            GC.Collect();
            //Draw visible tile map//*--------------------DRAW------------------------------
            //--------------------------------------Row 1-------------------------------------------------------------

            //.
            Rectangle blackCube = new Rectangle(1, 1189, 15, 15);

            //L
            Rectangle leftArrow = new Rectangle(18, 1189, 15, 15);

            //(null)

            //R
            Rectangle rigthtArrow = new Rectangle(52, 1189, 15, 15);

            //W
            Rectangle leftUPW = new Rectangle(69, 1189, 15, 15);

            //X
            Rectangle rightUPW = new Rectangle(86, 1189, 15, 15);

            //--------------------------------------Row 2-------------------------------------------------------------

            //K
            Rectangle stack = new Rectangle(1, 1206, 15, 15);

            //S
            Rectangle firstPatterBar = new Rectangle(18, 1206, 15, 15);

            //
            Rectangle secondPatternBar = new Rectangle(35, 1206, 15, 15);

            //V
            Rectangle verticalPipe = new Rectangle(52, 1206, 15, 15);

            //Y
            Rectangle leftDW = new Rectangle(69, 1206, 15, 15);

            //Z
            Rectangle rightDW = new Rectangle(86, 1206, 15, 15);

            //--------------------------------------Row 3-------------------------------------------------------------

            //5
            Rectangle leftUpBigCube = new Rectangle(1, 1223, 15, 15);

            //6
            Rectangle rightUPBigCube = new Rectangle(18, 1223, 15, 15);

            //~
            Rectangle rotateRightCilinder = new Rectangle(35, 1223, 15, 15);

            //C
            Rectangle middlePipe = new Rectangle(52, 1223, 15, 15);

            //+
            Rectangle endPipe = new Rectangle(69, 1223, 15, 15);

            //T
            Rectangle cubeDivided = new Rectangle(86, 1223, 15, 15);

            //--------------------------------------Row 4-------------------------------------------------------------

            //7
            Rectangle leftDBigCube = new Rectangle(1, 1240, 15, 15);

            //8
            Rectangle rightDBigCube = new Rectangle(18, 1240, 15, 15);

            //signo chino ¬
            Rectangle rotateLeftCilinder = new Rectangle(35, 1240, 15, 15);

            //|
            Rectangle leftCilinbder = new Rectangle(52, 1240, 15, 15);

            //!
            Rectangle rightCilinder = new Rectangle(69, 1240, 15, 15);

            //[
            Rectangle leftTwoCubes = new Rectangle(86, 1240, 15, 15);


            //--------------------------------------Row 5-------------------------------------------------------------

            //A
            Rectangle cilinderTop1 = new Rectangle(1, 1257, 15, 15);

            //B
            Rectangle cilinderTop2 = new Rectangle(18, 1257, 15, 15);

            //

            //D
            Rectangle cilinderTop3 = new Rectangle(52, 1257, 15, 15);

            //E
            Rectangle cilinderTop4 = new Rectangle(69, 1257, 15, 15);

            //]
            Rectangle rightTwoCubes = new Rectangle(86, 1257, 15, 15);

            //--------------------------------------Row 6-------------------------------------------------------------

            //F
            Rectangle rotateCilinderTop1 = new Rectangle(1, 1274, 15, 15);

            //P
            Rectangle redHalfCube = new Rectangle(18, 1274, 15, 15);

            //1
            Rectangle leftUpGearBefore = new Rectangle(35, 1274, 15, 15);

            //2
            Rectangle rightUPGearBefore = new Rectangle(52, 1274, 15, 15);

            //
            Rectangle leftUpGearAfter = new Rectangle(69, 1274, 15, 15);

            //
            Rectangle rightUPGearAfter = new Rectangle(86, 1274, 15, 15);

            //--------------------------------------Row 7-------------------------------------------------------------

            //G
            Rectangle rotateCilinderTop2 = new Rectangle(1, 1291, 15, 15);

            //@
            Rectangle otherRedCube = new Rectangle(18, 1291, 15, 15);

            //3
            Rectangle leftDGearBefore = new Rectangle(35, 1291, 15, 15);

            //4
            Rectangle rightDGearBefore = new Rectangle(52, 1291, 15, 15);

            //
            Rectangle rightDGearAfter = new Rectangle(69, 1291, 15, 15);

            //
            Rectangle leftDGearAfter = new Rectangle(86, 1291, 15, 15);

            //--------------------------------------Row 8-------------------------------------------------------------

            //H
            Rectangle rotateCilinderTop3 = new Rectangle(1, 1308, 15, 15);

            //0
            Rectangle oneGearBefore = new Rectangle(18, 1308, 15, 15);

            //
            Rectangle oneGearAfter = new Rectangle(35, 1308, 15, 15);

            //M
            Rectangle pistonHeadUp = new Rectangle(52, 1308, 15, 15);

            //
            Rectangle pistonHeadDown = new Rectangle(69, 1308, 15, 15);

            //-
            Rectangle redLine = new Rectangle(86, 1308, 15, 15);


            //--------------------------------------Row 9-------------------------------------------------------------

            //I
            Rectangle rotateCilinderTop4 = new Rectangle(1, 1325, 15, 15);

            //%
            Rectangle twoGearBefore = new Rectangle(18, 1325, 15, 15);

            //
            Rectangle twoGearAfter = new Rectangle(35, 1325, 15, 15);

            //i
            Rectangle bodyPistonUp = new Rectangle(52, 1325, 15, 15);

            //
            Rectangle bodyPistonDown = new Rectangle(69, 1325, 15, 15);


            //--------------------------------------Row 10-------------------------------------------------------------

            //J
            Rectangle rotateCilinderTop5 = new Rectangle(1, 1342, 15, 15);

            //U
            Rectangle engineBefore = new Rectangle(18, 1342, 15, 15);

            //
            Rectangle engineAfter = new Rectangle(35, 1342, 15, 15);

            //=
            Rectangle basePistonUp = new Rectangle(52, 1342, 15, 15);

            //
            Rectangle basePistonDown = new Rectangle(69, 1342, 15, 15);
            /*
             Rectangle oneGearBefore = new Rectangle(18, 1308, 15, 15);

            //
            Rectangle oneGearAfter = new Rectangle(35, 1308, 15, 15);

            */
            //enC = new Sprite(new Size(16, 16), new Size(nTileWidth, nTileHeight), new Point(1308,1400), tilesLevel, tilesLevel);

            int contadorU = 0;

            char c, d;
            float stepX, stepY;
            for (int x = -1; x < nVisibleTilesX + 2; x++)
            {
                for (int y = -1; y < nVisibleTilesY + 2; y++)
                {
                    Rectangle destRect = new Rectangle((x) * u, (y) * u, u, u);
                    c = GetTile(x + (int)fOffsetX, y + (int)fOffsetY);
                    d = GetTileM(x + (int)fOffsetX, y + (int)fOffsetY);
                    stepX = x * nTileWidth - fTileOffsetX;
                    stepY = y * nTileHeight - fTileOffsetY;

                    switch (c)
                    {
                        /*

                        case '.':
                            g.FillRectangle(Brushes.Cyan, stepX, stepY, nTileWidth, nTileHeight);
                            break;
                        case '#':
                            g.FillRectangle(Brushes.Red, stepX, stepY, nTileWidth, nTileHeight);
                            g.FillRectangle(Brushes.Black, stepX, stepY, nTileWidth, nTileHeight);
                            g.FillRectangle(Brushes.DarkRed, stepX + 1, stepY + 1, nTileWidth - 2, nTileHeight - 2);
                            g.FillEllipse(Brushes.DarkRed, stepX, stepY, nTileWidth, nTileHeight);
                            g.FillEllipse(Brushes.DarkSlateGray, stepX, stepY, nTileWidth / 2, nTileHeight / 2);
                            g.DrawLine(Pens.Black, stepX + nTileHeight / 2, stepY + nTileHeight / 2, stepX + nTileHeight, stepY + nTileHeight - 3);
                            g.DrawLine(Pens.Maroon, stepX + nTileHeight / 2, 2 + stepY + nTileHeight / 2, 1 + stepX + nTileHeight, stepY + nTileHeight - 2);
                            g.DrawLine(Pens.Black, stepX + nTileHeight / 2, stepY, stepX + nTileHeight / 2, stepY + nTileHeight * 2 / 3);
                            g.DrawLine(Pens.Black, 1 + stepX + nTileHeight / 2, stepY + 1, 2 + stepX + nTileHeight / 2, 3 + stepY + nTileHeight * 2 / 3);
                            g.DrawLine(Pens.Maroon, 2 + stepX + nTileHeight / 2, stepY, 1 + stepX + nTileHeight / 2, stepY + nTileHeight * 2 / 3);
                            g.DrawLine(Pens.Black, stepX + nTileHeight / 2, stepY + nTileHeight * 2 / 3, stepX, stepY + nTileHeight / 3);
                            g.DrawRectangle(Pens.Black, stepX + nTileHeight / 2, stepY, nTileWidth, nTileHeight - 1);
                            g.DrawRectangle(Pens.Gray, stepX, stepY, nTileWidth, nTileHeight - 1);
                            break;
                        case 'a'://ejemplo para sustituir parte del mapa con otra animación
                            coin.posX = stepX;
                            coin.posY = stepY;
                            coin.MoveSlow(2);
                            coin.Display(g);
                            if (coin.counter > 50)
                            {
                                SetTile(x + (int)fOffsetX, y + (int)fOffsetY, '.');
                                coin.counter = 0;
                            }
                            break;
                        case 'B':
                            g.FillRectangle(Brushes.Black, stepX, stepY, nTileWidth, nTileHeight);
                            g.FillPolygon(Brushes.Gray, new PointF[] { new PointF(stepX, stepY), new PointF(stepX + nTileWidth, stepY), new PointF(stepX, stepY + nTileHeight) });
                            g.FillRectangle(Brushes.DarkGray, stepX + nTileHeight / 4, stepY + nTileHeight / 4, nTileWidth / 2, nTileHeight / 2);
                            g.DrawLine(Pens.DarkGray, stepX, stepY, stepX + nTileWidth, stepY + nTileHeight);
                            break;
                        case '?':
                            g.FillRectangle(Brushes.Yellow, stepX, stepY, nTileWidth, nTileHeight);
                            break;
                        case 'o':
                            coin.posX = stepX;
                            coin.posY = stepY;
                            coin.MoveSlow(7);
                            coin.Display(g);
                            break;
                        case '*':
                            g.DrawImage(Resource1.questionS, stepX, stepY, nTileWidth, nTileHeight);
                            break;
                        default:
                            g.FillRectangle(Brushes.Black, stepX, stepY, nTileWidth, nTileHeight);
                            g.FillRectangle(Brushes.DarkRed, stepX + 1, stepY + 1, nTileWidth - 2, nTileHeight - 2);
                            g.DrawLine(Pens.Black, stepX + nTileHeight / 2, stepY + nTileHeight / 2, stepX + nTileHeight, stepY + nTileHeight - 3);
                            g.DrawLine(Pens.Maroon, stepX + nTileHeight / 2, 2 + stepY + nTileHeight / 2, 1 + stepX + nTileHeight, stepY + nTileHeight - 2);
                            g.DrawLine(Pens.Black, stepX + nTileHeight / 2, stepY, stepX + nTileHeight / 2, stepY + nTileHeight * 2 / 3);
                            g.DrawLine(Pens.Black, 1 + stepX + nTileHeight / 2, stepY + 1, 2 + stepX + nTileHeight / 2, 3 + stepY + nTileHeight * 2 / 3);
                            g.DrawLine(Pens.Maroon, 2 + stepX + nTileHeight / 2, stepY, 1 + stepX + nTileHeight / 2, stepY + nTileHeight * 2 / 3);
                            g.DrawLine(Pens.Black, stepX + nTileHeight / 2, stepY + nTileHeight * 2 / 3, stepX, stepY + nTileHeight / 3);
                            g.DrawRectangle(Pens.Black, stepX + nTileHeight / 2, stepY, nTileWidth, nTileHeight - 1);
                            g.DrawRectangle(Pens.Gray, stepX, stepY, nTileWidth, nTileHeight - 1);
                            //g.DrawImage(Resource1.TILER, stepX, stepY, nTileWidth, nTileHeight);//heavy
                            break;
                    }
                        */

                        //g.DrawRectangle(Pens.Gray, stepX, stepY, nTileWidth, nTileHeight);

                        case '*':
                            g.FillRectangle(Brushes.Black, x * u, y * u, u, u);
                            break;
                        case '.':
                            g.FillRectangle(Brushes.Black, x * u, y * u, u, u);
                            break;

                        case 'W':
                            g.DrawImage(tilesLevel, destRect, leftUPW, GraphicsUnit.Pixel);
                            break;
                        case 'X':
                            g.DrawImage(tilesLevel, destRect, rightUPW, GraphicsUnit.Pixel);
                            break;
                        case 'K':
                            g.DrawImage(tilesLevel, destRect, stack, GraphicsUnit.Pixel);
                            break;

                        case 'V':
                            g.DrawImage(tilesLevel, destRect, verticalPipe, GraphicsUnit.Pixel);
                            break;
                        case 'Y':
                            g.DrawImage(tilesLevel, destRect, leftDW, GraphicsUnit.Pixel);
                            break;
                        case 'Z':
                            g.DrawImage(tilesLevel, destRect, rightDW, GraphicsUnit.Pixel);
                            break;
                        case '5':
                            g.DrawImage(tilesLevel, destRect, leftUpBigCube, GraphicsUnit.Pixel);
                            break;
                        case '6':
                            g.DrawImage(tilesLevel, destRect, rightUPBigCube, GraphicsUnit.Pixel);
                            break;
                        case '~':
                            g.DrawImage(tilesLevel, destRect, rotateRightCilinder, GraphicsUnit.Pixel);
                            break;
                        case 'C':
                            g.DrawImage(tilesLevel, destRect, middlePipe, GraphicsUnit.Pixel);
                            break;
                        case '+':
                            g.DrawImage(tilesLevel, destRect, endPipe, GraphicsUnit.Pixel);
                            break;
                        case 'T':
                            g.DrawImage(tilesLevel, destRect, cubeDivided, GraphicsUnit.Pixel);
                            break;
                        case '7':
                            g.DrawImage(tilesLevel, destRect, leftDBigCube, GraphicsUnit.Pixel);
                            break;
                        case '8':
                            g.DrawImage(tilesLevel, destRect, rightDBigCube, GraphicsUnit.Pixel);
                            break;
                        case '¬':
                            g.DrawImage(tilesLevel, destRect, rotateLeftCilinder, GraphicsUnit.Pixel);
                            break;
                        case '|':
                            g.DrawImage(tilesLevel, destRect, leftCilinbder, GraphicsUnit.Pixel);
                            break;
                        case '!':
                            g.DrawImage(tilesLevel, destRect, rightCilinder, GraphicsUnit.Pixel);
                            break;
                        case '[':
                            g.DrawImage(tilesLevel, destRect, leftTwoCubes, GraphicsUnit.Pixel);
                            break;
                        case 'A':
                            g.DrawImage(tilesLevel, destRect, cilinderTop1, GraphicsUnit.Pixel);
                            break;
                        case 'B':
                            g.DrawImage(tilesLevel, destRect, cilinderTop2, GraphicsUnit.Pixel);
                            break;
                        case 'D':
                            g.DrawImage(tilesLevel, destRect, cilinderTop3, GraphicsUnit.Pixel);
                            break;


                        case 'E':
                            g.DrawImage(tilesLevel, destRect, cilinderTop4, GraphicsUnit.Pixel);
                            break;
                        case ']':
                            g.DrawImage(tilesLevel, destRect, rightTwoCubes, GraphicsUnit.Pixel);
                            break;

                        //--------------------------------------Row 6-------------------------------------------------------------
                        case 'F':
                            g.DrawImage(tilesLevel, destRect, rotateCilinderTop1, GraphicsUnit.Pixel);
                            break;
                        case 'P':
                            g.DrawImage(tilesLevel, destRect, redHalfCube, GraphicsUnit.Pixel);
                            break;
                        case '1':
                            g.DrawImage(tilesLevel, destRect, leftUpGearBefore, GraphicsUnit.Pixel);
                            break;
                        case '2':
                            g.DrawImage(tilesLevel, destRect, rightUPGearBefore, GraphicsUnit.Pixel);
                            break;

                        //--------------------------------------Row 7-------------------------------------------------------------
                        case 'G':
                            g.DrawImage(tilesLevel, destRect, rotateCilinderTop2, GraphicsUnit.Pixel);
                            break;
                        case '@':
                            g.DrawImage(tilesLevel, destRect, otherRedCube, GraphicsUnit.Pixel);
                            break;
                        case '3':
                            g.DrawImage(tilesLevel, destRect, leftDGearBefore, GraphicsUnit.Pixel);
                            break;
                        case '4':
                            g.DrawImage(tilesLevel, destRect, rightDGearBefore, GraphicsUnit.Pixel);
                            break;

                        //--------------------------------------Row 8-------------------------------------------------------------
                        case 'H':
                            g.DrawImage(tilesLevel, destRect, rotateCilinderTop3, GraphicsUnit.Pixel);
                            break;
                        case '0':
                            //g.DrawImage(tilesLevel, destRect, oneGearBefore, GraphicsUnit.Pixel);

                            break;
                        case 'M':
                            g.DrawImage(tilesLevel, destRect, pistonHeadUp, GraphicsUnit.Pixel);
                            break;
                        case '-':
                            g.DrawImage(tilesLevel, destRect, redLine, GraphicsUnit.Pixel);
                            break;

                        //--------------------------------------Row 9-------------------------------------------------------------
                        case 'I':
                            g.DrawImage(tilesLevel, destRect, rotateCilinderTop4, GraphicsUnit.Pixel);
                            break;
                        case '%':
                            g.DrawImage(tilesLevel, destRect, twoGearBefore, GraphicsUnit.Pixel);
                            break;
                        case 'i':
                            g.DrawImage(tilesLevel, destRect, bodyPistonUp, GraphicsUnit.Pixel);
                            break;

                        //--------------------------------------Row 10-------------------------------------------------------------
                        case 'J':
                            g.DrawImage(tilesLevel, destRect, rotateCilinderTop5, GraphicsUnit.Pixel);
                            break;
                        case 'U':
                            g.DrawImage(tilesLevel, destRect, engineBefore, GraphicsUnit.Pixel);
                            break;
                        case '=':
                            g.DrawImage(tilesLevel, destRect, basePistonUp, GraphicsUnit.Pixel);
                            break;
                        case 'e':
                            E.posX = destRect.X;
                            E.posY = destRect.Y;
                            E.MoveSlow(7);
                            E.Display(g);
                            break;

                    }
                    switch (d)
                    {
                        case '0':
                            enC.posX = destRect.X;
                            enC.posY = destRect.Y;
                            enC.MoveSlow(40);

                            enC.Display(g);


                            break;
                        case '%':
                            per.posX = destRect.X;
                            per.posY = destRect.Y;
                            per.MoveSlow(40);

                            per.Display(g);
                            break;

                        case 'U':
                            U.posX = destRect.X;
                            U.posY = destRect.Y;
                            U.MoveSlow(30);

                            U.Display(g);
                            break;
                        case '=':
                            eq.posX = destRect.X;
                            eq.posY = destRect.Y;
                            eq.MoveSlow(30);

                            eq.Display(g);
                            break;
                        case '1':
                            e1.posX = destRect.X;
                            e1.posY = destRect.Y;
                            e1.MoveSlow(40);

                            e1.Display(g);
                            break;
                        case '2':
                            e2.posX = destRect.X;
                            e2.posY = destRect.Y;
                            e2.MoveSlow(40);

                            e2.Display(g);
                            break;
                        case '3':
                            e3.posX = destRect.X;
                            e3.posY = destRect.Y;
                            e3.MoveSlow(50);

                            e3.Display(g);
                            break;
                        case '4':
                            e4.posX = destRect.X;
                            e4.posY = destRect.Y;
                            e4.MoveSlow(40);

                            e4.Display(g);
                            break;
                        case 'M':

                            M.posX = destRect.X;
                            M.posY = destRect.Y;
                            M.MoveSlow(30);

                            M.Display(g);
                            break;
                        case 'i':
                            i.posX = destRect.X;
                            i.posY = destRect.Y;
                            i.MoveSlow(30);

                            i.Display(g);
                            break;
                        case 'S':
                            S.posX = destRect.X;
                            S.posY = destRect.Y;
                            S.MoveSlow(50);

                            S.Display(g);
                            break;
                        case 'L':
                            L.posX = destRect.X;
                            L.posY = destRect.Y;
                            L.MoveSlow(20);

                            L.Display(g);
                            break;
                        case 'R':
                            R.posX = destRect.X;
                            R.posY = destRect.Y;
                            R.MoveSlow(20);

                            R.Display(g);
                            break;
                        ///PINK ENEMY
                        case 'H':
                            H.posX = destRect.X;
                            H.posY = destRect.Y;
                            H.MoveSlow(20);

                            H.Display(g);
                            break;
                        //WHEEL OF PINK ENEMY
                        case 'W':
                            W.posX = destRect.X;
                            W.posY = destRect.Y;
                            W.MoveSlow(6);

                            W.Display(g);
                            break;
                        //TALADRO()
                        case 'T':
                            TAL.posX = destRect.X;
                            TAL.posY = destRect.Y;
                            TAL.MoveSlow(6);

                            TAL.Display(g);
                            break;
                        //CAJA MEDIANA AZUL
                        case 'O':
                            orb.posX = destRect.X;
                            orb.posY = destRect.Y;
                            orb.MoveSlow(12);

                            orb.Display(g);
                            break;
                        //CHECKPOINT E
                        case 'E':
                            E.posX = destRect.X;
                            E.posY = destRect.Y;
                            E.MoveSlow(12);

                            E.Display(g);
                            break;
                        //ORBE GRANDE BOLA
                        case 'B':
                            ball.posX = destRect.X;
                            ball.posY = destRect.Y;
                            ball.MoveSlow(12);

                            ball.Display(g);
                            break;
                        //SMALL BLUE BOX 
                        case 's':
                            sorb.posX = destRect.X;
                            sorb.posY = destRect.Y;
                            sorb.MoveSlow(12);

                            sorb.Display(g);
                            break;
                        //TINY ORB (PUNTO)
                        case 'd':
                            dot.posX = destRect.X;
                            dot.posY = destRect.Y;
                            dot.MoveSlow(12);

                            dot.Display(g);
                            break;
                        case 'P':

                            /*
                            pren.posX = destRect.X;
                            pren.posY = destRect.Y;
                            

                            pren.Display(g);
                            */
                            break;
                    }

                }
            }

            g.DrawString("SCORE:: " + score, new Font("Consolas", 12, FontStyle.Bold), Brushes.White, 5, 5);

            /////DIBUJAR EL SPRITE EN UNA ZONA FIJA DE LA PANTALLA 

            EB.MainSprite.posX = 42;
            EB.MainSprite.posY = 40;
            EB.Update(0.05f, this);


            Proyectile.fPlayerPosX += player.fPlayerPosX + 0.1f;
            Proyectile.fPlayerPosY = player.fPlayerPosY - 1;

            //Proyectile.Update(0.000005f, this);

            Proyectile.MainSprite.posX = (Proyectile.fPlayerPosX - fOffsetX) * nTileWidth;
            Proyectile.MainSprite.posY = (Proyectile.fPlayerPosY - fOffsetY) * nTileHeight;

            pre2.fPlayerPosX = 44.5f;
            pre2.fPlayerPosY = 0;
            pre3.fPlayerPosX = 50.5f;
            pre3.fPlayerPosY = 0;
            pre4.fPlayerPosX = 54.5f;
            pre4.fPlayerPosY = 0;
            pre5.fPlayerPosX = 58.5f;
            pre5.fPlayerPosY = 0;



            /*
            EP.fPlayerPosX = 30;
            EP.fPlayerPosY = 5;

            EPC.fPlayerPosX = 30;
            EPC.fPlayerPosY = 4;
            */
            RESG.fPlayerPosX = 253;
            RESG.fPlayerPosY = 42;

            RES2.fPlayerPosX = 264;
            RES2.fPlayerPosY = 40;

            RES3.fPlayerPosX = 278;
            RES3.fPlayerPosY = 38;

            RES4.fPlayerPosX = 282;
            RES4.fPlayerPosY = 38;


            EP4.fPlayerPosX = 10;
            EP4.fPlayerPosY = 7;

            EPC4.fPlayerPosX = 10;
            EPC4.fPlayerPosY = 6;
            /*
            EP4.UpdateEP(0.05f, this,60);
            EPC4.UpdateEP(0.05f, this,60);
            EP4.MainSprite.MoveSlow(10);
            EPC4.MainSprite.MoveSlow(5);
            */

            EP.fPlayerPosX = 171;
            EP.fPlayerPosY = 35;

            EPC.fPlayerPosX = 171;
            EPC.fPlayerPosY = 34;

            EP.fPlayerPosX = 171;
            EP.fPlayerPosY = 35;

            EPC2.fPlayerPosX = 176;
            EPC2.fPlayerPosY = 34;

            EP2.fPlayerPosX = 176;
            EP2.fPlayerPosY = 35;

            EPC3.fPlayerPosX = 196;
            EPC3.fPlayerPosY = 34;

            EP3.fPlayerPosX = 196;
            EP3.fPlayerPosY = 35;

            talU.fPlayerPosX = 70;
            talU.fPlayerPosY = 12;
            talU2.fPlayerPosX = 72;
            talU2.fPlayerPosY = 14;
            talU3.fPlayerPosX = 74;
            talU3.fPlayerPosY = 13;
            talU4.fPlayerPosX = 76;
            talU4.fPlayerPosY = 12;
            talU5.fPlayerPosX = 78;
            talU5.fPlayerPosY = 14;
            talU6.fPlayerPosX = 80;
            talU6.fPlayerPosY = 13;
            talU7.fPlayerPosX = 82;
            talU7.fPlayerPosY = 12;
            talU8.fPlayerPosX = 84;
            talU8.fPlayerPosY = 14;

            tal.fPlayerPosX = 70;
            tal.fPlayerPosY = 0;
            tal2.fPlayerPosX = 72;
            tal2.fPlayerPosY = 0;
            tal3.fPlayerPosX = 74;
            tal3.fPlayerPosY = 0;
            tal4.fPlayerPosX = 76;
            tal4.fPlayerPosY = 0;
            tal5.fPlayerPosX = 78;
            tal5.fPlayerPosY = 0;
            tal6.fPlayerPosX = 80;
            tal6.fPlayerPosY = 0;
            tal7.fPlayerPosX = 82;
            tal7.fPlayerPosY = 0;
            tal8.fPlayerPosX = 84;
            tal8.fPlayerPosY = 0;


            prensa.fPlayerPosX = 38.5f;
            prensa.fPlayerPosY = 0;

            switch ((int)player.fPlayerPosX)
            {
                case int n when n > RESG.fPlayerPosX - 10 && n < RESG.fPlayerPosX + 34:
                    RESG.Update(0.05f, this);
                    RES2.Update(0.05f, this);
                    RES3.Update(0.05f, this);
                    RES4.Update(0.05f, this );
                    break;
                case int n when n > prensa.fPlayerPosX - 10 && n < prensa.fPlayerPosX + 25:
                    prensa.UpdateE(0.05f, this, -2f);
                    pre2.UpdateE(0.05f, this, -2f);
                    pre3.UpdateE(0.05f, this, -3f);
                    pre4.UpdateE(0.05f, this, -3f);
                    pre5.UpdateE(0.05f, this, -2f);
                    break;
                case int n when n > EPC3.fPlayerPosX - 7 && n < EPC3.fPlayerPosX + 25:
                    EP3.UpdateEP(0.05f, this, 158);
                    EPC3.UpdateEP(0.05f, this, 158);
                    EP3.MainSprite.MoveSlow(10);
                    EPC3.MainSprite.MoveSlow(5);
                    break;
                case int n when n > EPC2.fPlayerPosX- 5 && n < EPC2.fPlayerPosX + 12:
                    EP2.UpdateEP(0.05f, this,152.5f);
                    EPC2.UpdateEP(0.05f, this,152.5f);
                    EP2.MainSprite.MoveSlow(10);
                    EPC2.MainSprite.MoveSlow(5);
                    break;
                case int n when n > EPC.fPlayerPosX - 15 && n < EPC.fPlayerPosX:
                    EP.UpdateEP(0.05f, this,158);
                    EPC.UpdateEP(0.05f, this,158);
                    EP.MainSprite.MoveSlow(10);
                    EPC.MainSprite.MoveSlow(5);
                    break;
                case int n when n > tal.fPlayerPosX - 4 && n < tal.fPlayerPosX + 15:

                    tal.UpdateT(0.05f, this, true);
                    tal.MainSprite.MoveSlow(4);
                    tal2.UpdateT(0.05f, this, true);
                    tal2.MainSprite.MoveSlow(4);
                    tal3.UpdateT(0.05f, this, true);
                    tal3.MainSprite.MoveSlow(4);
                    tal4.UpdateT(0.05f, this, true);
                    tal4.MainSprite.MoveSlow(4);
                    tal5.UpdateT(0.05f, this, true);
                    tal5.MainSprite.MoveSlow(4);
                    tal6.UpdateT(0.05f, this, true);
                    tal6.MainSprite.MoveSlow(4);
                    tal7.UpdateT(0.05f, this, true);
                    tal7.MainSprite.MoveSlow(4);
                    tal8.UpdateT(0.05f, this, true);
                    tal8.MainSprite.MoveSlow(4);
                    talU.UpdateT(0.05f, this, false);
                    talU.MainSprite.MoveSlow(4);
                    talU2.UpdateT(0.05f, this, false);
                    talU2.MainSprite.MoveSlow(4);
                    talU3.UpdateT(0.05f, this, false);
                    talU3.MainSprite.MoveSlow(4);
                    talU4.UpdateT(0.05f, this, false);
                    talU4.MainSprite.MoveSlow(4);
                    talU5.UpdateT(0.05f, this, false);
                    talU5.MainSprite.MoveSlow(4);
                    talU6.UpdateT(0.05f, this, false);
                    talU6.MainSprite.MoveSlow(4);
                    talU7.UpdateT(0.05f, this, false);
                    talU7.MainSprite.MoveSlow(4);
                    talU8.UpdateT(0.05f, this, false);
                    talU8.MainSprite.MoveSlow(4);
                    break;
                case int n when n > tal8.fPlayerPosX - 3 && n < tal8.fPlayerPosX + 12:
                    tal.RotateImage180();
                    tal2.RotateImage180();
                    tal3.RotateImage180();
                    tal4.RotateImage180();
                    tal5.RotateImage180();
                    tal6.RotateImage180();
                    tal7.RotateImage180();
                    tal8.RotateImage180();
                    talU.RotateImage180();
                    talU2.RotateImage180();
                    talU3.RotateImage180();
                    talU4.RotateImage180();
                    talU5.RotateImage180();
                    talU6.RotateImage180();
                    talU7.RotateImage180();
                    talU8.RotateImage180();

                    talU.fPlayerPosX = 86;
                    talU.fPlayerPosY = 13;
                    talU2.fPlayerPosX = 88;
                    talU2.fPlayerPosY = 13;
                    talU3.fPlayerPosX = 90;
                    talU3.fPlayerPosY = 13;
                    talU4.fPlayerPosX = 92;
                    talU4.fPlayerPosY = 13;
                    talU5.fPlayerPosX = 94;
                    talU5.fPlayerPosY = 13;
                    talU6.fPlayerPosX = 97;
                    talU6.fPlayerPosY = 13;
                    talU7.fPlayerPosX = 99;
                    talU7.fPlayerPosY = 13;
                    talU8.fPlayerPosX = 101;
                    talU8.fPlayerPosY = 13;

                    tal.fPlayerPosX = 85;
                    tal.fPlayerPosY = 0;
                    tal2.fPlayerPosX = 87;
                    tal2.fPlayerPosY = 0;
                    tal3.fPlayerPosX = 89;
                    tal3.fPlayerPosY = 0;
                    tal4.fPlayerPosX = 91;
                    tal4.fPlayerPosY = 0;
                    tal5.fPlayerPosX = 93;
                    tal5.fPlayerPosY = 0;
                    tal6.fPlayerPosX = 95;
                    tal6.fPlayerPosY = 0;
                    tal7.fPlayerPosX = 97;
                    tal7.fPlayerPosY = 0;
                    tal8.fPlayerPosX = 99;
                    tal8.fPlayerPosY = 0;
                    /////////////////////////

                    //////
                    tal.UpdateT(0.05f, this, false);
                    tal.MainSprite.MoveSlow(4);
                    tal2.UpdateT(0.05f, this, false);
                    tal2.MainSprite.MoveSlow(4);
                    tal3.UpdateT(0.05f, this, false);
                    tal3.MainSprite.MoveSlow(4);
                    tal4.UpdateT(0.05f, this, false);
                    tal4.MainSprite.MoveSlow(4);
                    tal5.UpdateT(0.05f, this, false);
                    tal5.MainSprite.MoveSlow(4);
                    tal6.UpdateT(0.05f, this, false);
                    tal6.MainSprite.MoveSlow(4);
                    tal7.UpdateT(0.05f, this, false);
                    tal7.MainSprite.MoveSlow(4);
                    tal8.UpdateT(0.05f, this, false);
                    tal8.MainSprite.MoveSlow(4);
                    talU.UpdateT(0.05f, this, true);
                    talU.MainSprite.MoveSlow(4);
                    talU2.UpdateT(0.05f, this, true);
                    talU2.MainSprite.MoveSlow(4);
                    talU3.UpdateT(0.05f, this, true);
                    talU3.MainSprite.MoveSlow(4);
                    talU4.UpdateT(0.05f, this, true);
                    talU4.MainSprite.MoveSlow(4);
                    talU5.UpdateT(0.05f, this, true);
                    talU5.MainSprite.MoveSlow(4);
                    talU6.UpdateT(0.05f, this, true);
                    talU6.MainSprite.MoveSlow(4);
                    talU7.UpdateT(0.05f, this, true);
                    talU7.MainSprite.MoveSlow(4);
                    talU8.UpdateT(0.05f, this, true);
                    talU8.MainSprite.MoveSlow(4);
                    ///////////////////
                    SetPlayerSpritePosition(tal, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal2, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal3, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal4, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal5, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal6, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal7, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal8, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU2, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU3, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU4, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU5, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU6, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU7, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU8, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    break;
                case int n when n > tal8.fPlayerPosX + 15 && n < tal8.fPlayerPosX + 40:
                    tal.RotateImage180();
                    tal2.RotateImage180();
                    tal3.RotateImage180();
                    tal4.RotateImage180();
                    tal5.RotateImage180();
                    tal6.RotateImage180();
                    tal7.RotateImage180();
                    tal8.RotateImage180();
                    talU.RotateImage180();
                    talU2.RotateImage180();
                    talU3.RotateImage180();
                    talU4.RotateImage180();
                    talU5.RotateImage180();
                    talU6.RotateImage180();
                    talU7.RotateImage180();
                    talU8.RotateImage180();

                    talU.fPlayerPosX = 103;
                    talU.fPlayerPosY = 13;
                    talU2.fPlayerPosX = 105;
                    talU2.fPlayerPosY = 12;
                    talU3.fPlayerPosX = 108;
                    talU3.fPlayerPosY = 14;
                    talU4.fPlayerPosX = 110;
                    talU4.fPlayerPosY = 12;
                    talU5.fPlayerPosX = 112;
                    talU5.fPlayerPosY = 14;
                    talU6.fPlayerPosX = 115;
                    talU6.fPlayerPosY = 13;
                    talU7.fPlayerPosX = 117;
                    talU7.fPlayerPosY = 14;
                    talU8.fPlayerPosX = 120;
                    talU8.fPlayerPosY = 12;

                    tal.fPlayerPosX = 102;
                    tal.fPlayerPosY = 0;
                    tal2.fPlayerPosX = 104;
                    tal2.fPlayerPosY = 1;
                    tal3.fPlayerPosX = 106;
                    tal3.fPlayerPosY = 0;
                    tal4.fPlayerPosX = 108;
                    tal4.fPlayerPosY = 2;
                    tal5.fPlayerPosX = 110;
                    tal5.fPlayerPosY = 0;
                    tal6.fPlayerPosX = 112;
                    tal6.fPlayerPosY = 1;
                    tal7.fPlayerPosX = 114;
                    tal7.fPlayerPosY = 0;
                    tal8.fPlayerPosX = 116;
                    tal8.fPlayerPosY = 2;
                    /////////////////////////

                    //////
                    tal.UpdateT(0.05f, this, true);
                    tal.MainSprite.MoveSlow(4);
                    tal2.UpdateT(0.05f, this, true);
                    tal2.MainSprite.MoveSlow(4);
                    tal3.UpdateT(0.05f, this, true);
                    tal3.MainSprite.MoveSlow(4);
                    tal4.UpdateT(0.05f, this, true);
                    tal4.MainSprite.MoveSlow(4);
                    tal5.UpdateT(0.05f, this, true);
                    tal5.MainSprite.MoveSlow(4);
                    tal6.UpdateT(0.05f, this, true);
                    tal6.MainSprite.MoveSlow(4);
                    tal7.UpdateT(0.05f, this, true);
                    tal7.MainSprite.MoveSlow(4);
                    tal8.UpdateT(0.05f, this, true);
                    tal8.MainSprite.MoveSlow(4);
                    talU.UpdateT(0.05f, this, false);
                    talU.MainSprite.MoveSlow(4);
                    talU2.UpdateT(0.05f, this, false);
                    talU2.MainSprite.MoveSlow(4);
                    talU3.UpdateT(0.05f, this, false);
                    talU3.MainSprite.MoveSlow(4);
                    talU4.UpdateT(0.05f, this, false);
                    talU4.MainSprite.MoveSlow(4);
                    talU5.UpdateT(0.05f, this, false);
                    talU5.MainSprite.MoveSlow(4);
                    talU6.UpdateT(0.05f, this, false);
                    talU6.MainSprite.MoveSlow(4);
                    talU7.UpdateT(0.05f, this, false);
                    talU7.MainSprite.MoveSlow(4);
                    talU8.UpdateT(0.05f, this, false);
                    talU8.MainSprite.MoveSlow(4);
                    ///////////////////
                    SetPlayerSpritePosition(tal, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal2, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal3, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal4, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal5, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal6, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal7, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(tal8, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU2, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU3, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU4, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU5, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU6, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU7, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    SetPlayerSpritePosition(talU8, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
                    break;
            }

            prensa.MainSprite.posX = (prensa.fPlayerPosX - fOffsetX) * nTileWidth;
            prensa.MainSprite.posY = (prensa.fPlayerPosY - fOffsetY) * nTileHeight;

            
            RESG.MainSprite.posX = (RESG.fPlayerPosX - fOffsetX) * nTileWidth;
            RESG.MainSprite.posY = (RESG.fPlayerPosY - fOffsetY) * nTileHeight;



            SetPlayerSpritePosition(tal, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(tal2, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(tal3, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(tal4, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(tal5, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(tal6, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(tal7, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(tal8, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(talU, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(talU2, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(talU3, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(talU4, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(talU5, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(talU6, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(talU7, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(talU8, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(RESG, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(RES2, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(RES3, fOffsetX, fOffsetY, nTileWidth, nTileHeight);
            SetPlayerSpritePosition(RES4, fOffsetX, fOffsetY, nTileWidth, nTileHeight);

            EPC.MainSprite.posX = (EP.fPlayerPosX + 0.2f - fOffsetX) * nTileWidth;
            EPC.MainSprite.posY = (EP.fPlayerPosY - 1.9f - fOffsetY) * nTileHeight;

            EP.MainSprite.posX = (EP.fPlayerPosX - fOffsetX) * nTileWidth;
            EP.MainSprite.posY = (EP.fPlayerPosY - 0.6f - fOffsetY) * nTileHeight;

            EPC2.MainSprite.posX = (EP2.fPlayerPosX + 0.2f - fOffsetX) * nTileWidth;
            EPC2.MainSprite.posY = (EP2.fPlayerPosY - 1.9f - fOffsetY) * nTileHeight;

            EP2.MainSprite.posX = (EP2.fPlayerPosX - fOffsetX) * nTileWidth;
            EP2.MainSprite.posY = (EP2.fPlayerPosY - 0.6f - fOffsetY) * nTileHeight;

            EPC3.MainSprite.posX = (EP3.fPlayerPosX + 0.2f - fOffsetX) * nTileWidth;
            EPC3.MainSprite.posY = (EP3.fPlayerPosY - 1.9f - fOffsetY) * nTileHeight;

            EP3.MainSprite.posX = (EP3.fPlayerPosX - fOffsetX) * nTileWidth;
            EP3.MainSprite.posY = (EP3.fPlayerPosY - 0.6f - fOffsetY) * nTileHeight;

            EPC4.MainSprite.posX = (EP4.fPlayerPosX + 0.2f - fOffsetX) * nTileWidth;
            EPC4.MainSprite.posY = (EP4.fPlayerPosY - 1.9f - fOffsetY) * nTileHeight;

            EP4.MainSprite.posX = (EP4.fPlayerPosX - fOffsetX) * nTileWidth;
            EP4.MainSprite.posY = (EP4.fPlayerPosY - 0.6f - fOffsetY) * nTileHeight;


            pre2.MainSprite.posX = (pre2.fPlayerPosX - fOffsetX) * nTileWidth;
            pre2.MainSprite.posY = (pre2.fPlayerPosY - fOffsetY) * nTileHeight;

            pre3.MainSprite.posX = (pre3.fPlayerPosX - fOffsetX) * nTileWidth;
            pre3.MainSprite.posY = (pre3.fPlayerPosY - fOffsetY) * nTileHeight;

            pre4.MainSprite.posX = (pre4.fPlayerPosX - fOffsetX) * nTileWidth;
            pre4.MainSprite.posY = (pre4.fPlayerPosY - fOffsetY) * nTileHeight;

            pre5.MainSprite.posX = (pre5.fPlayerPosX - fOffsetX) * nTileWidth;
            pre5.MainSprite.posY = (pre5.fPlayerPosY - fOffsetY) * nTileHeight;


            switch (player.hit)
            {
                case false:
                    //player.fPlayerPosX > 171 && player.fPlayerPosX < 173
                    //poSs y=40 es pasando las tuercas de abajo
                    if (player.fPlayerPosX > 317)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > RES4.fPlayerPosX - 0.9f && player.fPlayerPosX < RES4.fPlayerPosX + 0.6f && player.fPlayerPosY <= RES4.fPlayerPosY + 3f && player.fPlayerPosY >= RES4.fPlayerPosY - 0.8f)
                    {

                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > RES3.fPlayerPosX - 0.9f && player.fPlayerPosX < RES3.fPlayerPosX + 0.6f && player.fPlayerPosY <= RES3.fPlayerPosY + 3f && player.fPlayerPosY >= RES3.fPlayerPosY - 0.8f)
                    {

                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > RES2.fPlayerPosX - 0.9f && player.fPlayerPosX < RES2.fPlayerPosX + 0.6f && player.fPlayerPosY <= RES2.fPlayerPosY + 3f && player.fPlayerPosY >= RES2.fPlayerPosY - 0.8f)
                    {

                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > RESG.fPlayerPosX - 0.9f && player.fPlayerPosX < RESG.fPlayerPosX + 0.6f && player.fPlayerPosY <= RESG.fPlayerPosY + 3f && player.fPlayerPosY >= RESG.fPlayerPosY - 0.8f)
                    {
                        
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }

                    if (player.fPlayerPosX > EP3.fPlayerPosX - 0.4f && player.fPlayerPosX < EP3.fPlayerPosX + 0.4f && player.fPlayerPosY <= EP3.fPlayerPosY + 0.7f && player.fPlayerPosY >= EP3.fPlayerPosY - 0.7f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > EP2.fPlayerPosX - 0.4f && player.fPlayerPosX < EP2.fPlayerPosX + 0.4f && player.fPlayerPosY <= EP2.fPlayerPosY + 0.7f && player.fPlayerPosY >= EP2.fPlayerPosY - 0.7f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > EP.fPlayerPosX - 0.4f && player.fPlayerPosX < EP.fPlayerPosX + 0.4f && player.fPlayerPosY <= EP.fPlayerPosY + 0.7f && player.fPlayerPosY >= EP.fPlayerPosY - 0.7f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > talU8.fPlayerPosX - 0.2f && player.fPlayerPosX < talU8.fPlayerPosX + 0.2f && player.fPlayerPosY <= talU8.fPlayerPosY + 0.9f && player.fPlayerPosY >= talU8.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > talU7.fPlayerPosX - 0.2f && player.fPlayerPosX < talU7.fPlayerPosX + 0.2f && player.fPlayerPosY <= talU7.fPlayerPosY + 0.9f && player.fPlayerPosY >= talU7.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > talU6.fPlayerPosX - 0.2f && player.fPlayerPosX < talU6.fPlayerPosX + 0.2f && player.fPlayerPosY <= talU6.fPlayerPosY + 0.9f && player.fPlayerPosY >= talU6.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > talU5.fPlayerPosX - 0.2f && player.fPlayerPosX < talU5.fPlayerPosX + 0.2f && player.fPlayerPosY <= talU5.fPlayerPosY + 0.9f && player.fPlayerPosY >= talU5.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > talU4.fPlayerPosX - 0.2f && player.fPlayerPosX < talU4.fPlayerPosX + 0.2f && player.fPlayerPosY <= talU4.fPlayerPosY + 0.9f && player.fPlayerPosY >= talU4.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > talU3.fPlayerPosX - 0.2f && player.fPlayerPosX < talU3.fPlayerPosX + 0.2f && player.fPlayerPosY <= talU3.fPlayerPosY + 0.9f && player.fPlayerPosY >= talU3.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > talU2.fPlayerPosX - 0.2f && player.fPlayerPosX < talU2.fPlayerPosX + 0.2f && player.fPlayerPosY <= talU2.fPlayerPosY + 0.9f && player.fPlayerPosY >= talU2.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > talU.fPlayerPosX - 0.2f && player.fPlayerPosX < talU.fPlayerPosX + 0.2f && player.fPlayerPosY <= talU.fPlayerPosY + 0.9f && player.fPlayerPosY >= talU.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > tal8.fPlayerPosX - 0.2f && player.fPlayerPosX < tal8.fPlayerPosX + 0.2f && player.fPlayerPosY <= tal8.fPlayerPosY + 0.9f && player.fPlayerPosY >= tal8.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > tal7.fPlayerPosX - 0.2f && player.fPlayerPosX < tal7.fPlayerPosX + 0.2f && player.fPlayerPosY <= tal7.fPlayerPosY + 0.9f && player.fPlayerPosY >= tal7.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > tal6.fPlayerPosX - 0.2f && player.fPlayerPosX < tal6.fPlayerPosX + 0.2f && player.fPlayerPosY <= tal6.fPlayerPosY + 0.9f && player.fPlayerPosY >= tal6.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > tal5.fPlayerPosX - 0.2f && player.fPlayerPosX < tal5.fPlayerPosX + 0.2f && player.fPlayerPosY <= tal5.fPlayerPosY + 0.9f && player.fPlayerPosY >= tal5.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > tal4.fPlayerPosX - 0.2f && player.fPlayerPosX < tal4.fPlayerPosX + 0.2f && player.fPlayerPosY <= tal4.fPlayerPosY + 0.9f && player.fPlayerPosY >= tal4.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > tal3.fPlayerPosX - 0.2f && player.fPlayerPosX < tal3.fPlayerPosX + 0.2f && player.fPlayerPosY <= tal3.fPlayerPosY + 0.9f && player.fPlayerPosY >= tal3.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > tal2.fPlayerPosX - 0.2f && player.fPlayerPosX < tal2.fPlayerPosX + 0.2f && player.fPlayerPosY <= tal2.fPlayerPosY + 0.9f && player.fPlayerPosY >= tal2.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    if (player.fPlayerPosX > tal.fPlayerPosX - 0.2f && player.fPlayerPosX < tal.fPlayerPosX + 0.2f && player.fPlayerPosY <= tal.fPlayerPosY + 0.9f && player.fPlayerPosY >= tal.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    else if (player.fPlayerPosX > talU.fPlayerPosX - 0.2f && player.fPlayerPosX < talU.fPlayerPosX + 0.2f && player.fPlayerPosY <= talU.fPlayerPosY + 0.9f && player.fPlayerPosY >= talU.fPlayerPosY - 1f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    else if (player.fPlayerPosX > pre5.fPlayerPosX - 1f && player.fPlayerPosX < pre5.fPlayerPosX + 1f && player.fPlayerPosY <= pre5.fPlayerPosY + 5.8f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    else if (player.fPlayerPosX > pre4.fPlayerPosX - 1f && player.fPlayerPosX < pre4.fPlayerPosX + 1f && player.fPlayerPosY <= pre4.fPlayerPosY + 4.8f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    else if (player.fPlayerPosX > pre3.fPlayerPosX - 1f && player.fPlayerPosX < pre3.fPlayerPosX + 1f && player.fPlayerPosY <= pre3.fPlayerPosY + 4.8f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    else if (player.fPlayerPosX > pre2.fPlayerPosX - 1f && player.fPlayerPosX < pre2.fPlayerPosX + 1f && player.fPlayerPosY <= pre2.fPlayerPosY + 5.8f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    else if (player.fPlayerPosX > prensa.fPlayerPosX - 1f && player.fPlayerPosX < prensa.fPlayerPosX + 1f && player.fPlayerPosY <= prensa.fPlayerPosY + 5.8f)
                    {
                        HCount = 0;
                        player.life--;
                        player.hit = true;
                        EB.MainSprite.MoveSlow(1);
                    }
                    break;

                case true:
                    HCount++;
                    if(player.fPlayerPosX > RESG.fPlayerPosX - 10 && player.fPlayerPosX < RESG.fPlayerPosX + 34)
                    {
                        RESG.MainSprite.MoveSlow(2);
                        RES2.MainSprite.MoveSlow(2);
                        RES3.MainSprite.MoveSlow(2);
                        RES4.MainSprite.MoveSlow(2);
                    }

                    if (HCount > 30)
                    {
                        player.hit = false;
                    }
                    if (HCount % 2 != 0) 
                    {
                       
                        player.MainSprite.Position(1000, 1000); 
                    }
                    break;
            }


            player.MainSprite.posX = (player.fPlayerPosX - fOffsetX) * nTileWidth;
            player.MainSprite.posY = (player.fPlayerPosY - fOffsetY) * nTileHeight;
        }


        public void SetTile(float x, float y, char c)//changes the tile
        {
            if (x >= 0 && x < nLevelWidth && y >= 0 && y < nLevelHeight)
            {
                int index = (int)y * nLevelWidth + (int)x;
                sLevel = sLevel.Remove(index, 1).Insert(index, c.ToString());
                Play();
                score += 10;

            }
        }

        private void SetPlayerSpritePosition(Player player, float offsetX, float offsetY, int tileWidth, int tileHeight)
        {
            player.MainSprite.posX = (player.fPlayerPosX - offsetX) * tileWidth;
            player.MainSprite.posY = (player.fPlayerPosY - offsetY) * tileHeight;
        }


        public char GetTile(float x, float y)
        {
            if (x >= 0 && x < nLevelWidth && y >= 0 && y < nLevelHeight)
                return sLevel[(int)y * nLevelWidth + (int)x];
            else
                return ' ';
        }

        public char GetTileM(float x, float y)
        {
            if (x >= 0 && x < nLevelWidth && y >= 0 && y < nLevelHeight)
                return map[(int)y * nLevelWidth + (int)x];
            else
                return ' ';
        }

        public void Play()
        {
            if (isP1)
            {
                thread = new Thread(PlayThread);
                thread.Start();
            }
            threadStop = new Thread(PlayStop);
            threadStop.Start();
        }

        private void PlayThread()
        {
            isP1 = false;
            if (MAIN.sPlayer != null)
            {
                MAIN.sPlayer.Stop();
            }
            soundPlayer.PlaySync();

            isP1 = true;
        }

        private void PlayStop()
        {

            soundPlayer.Stop();
            if (MAIN.sPlayer != null)
            {
                MAIN.sPlayer.PlayLooping();
            }
        }

    }
}
